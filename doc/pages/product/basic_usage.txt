====== Basic usage ======

In order to build an application which uses ADK the following conditions must be met:
  * ADK package is available in the file system.
  * ''ADK_ROOT'' environment variable is pointing to ADK package root directory.
  * ''ADK_PREFIX'' environment variable is pointing to a directory where ADK tools are installed (alternatively ''%%--adk-prefix%%'' command line option can be specified during build). 

Create //SConscript// (or //SConstruct// on top level) file using the following rules:

  * Import ''adk'' module from //site_scons// directory in ADK source package.
  * Create ''adk.Conf'' class instance.
  * Specify ''APP_TYPE'' parameter as target application type. Default value is ''app''. The following values allowed:
    * ''app'' for building executable application.
    * ''dynamic_lib'' for building dynamic library (it is either shared object for Linux or DLL for Windows).
    * ''static_lib'' for building static library.
    * ''unit_test'' for building unit test.
  * Specify ''APP_NAME'' parameter as a name of resulted binary file without suffix and/or prefix.
  * Call ''Build()'' method of the created ''adk.Conf'' instance.
  * Multiple configurations can be described in one build script.

Example:

<code python>
import adk

conf = adk.Conf(APP_NAME= 'desktop_console',
                APP_TYPE = 'app',
                APP_ALIAS = 'desktop_console_sample',
                USE_GUI = False).Build()
</code>

After that run ''scons'' command. You also can specify build configuration using ''%%--adk-build-type%%'' option (default is ''release'' if ''ADK_BUILD_TYPE'' environment variable is not set).
<code bash>
scons --adk-build-type=debug
</code>

When using outside of ADK project, create ''site_scons'' directory in your
project root directory and place such file inside:

<file python make.py>
import os, sys

sys.path.append(os.path.join(os.environ['ADK_ROOT'], 'site_scons'))

from adk import *

DefConfAppend(INCLUDE_DIRS = '#/include')
</file>

''DefConfAppend()'' method sets values for default parameters to which user
values will be appended. In this example it defines additional include directory
which will be used for all configurations inside this project. ''DefConf()'' sets
initial values which may be completely overwritten by particular configuration.

Once done ''make'' module may be used in the same way as ''adk'' module:
<code python>
import make

make.Conf(APP_TYPE = 'app',
          APP_NAME = 'mysample',
          LIBS = 'samplelib',
          LIB_DIRS = '../samplelib').Build()
</code>

Command line parameters:
  * ''%%--adk-build-type%%'' -- build configuration type. If not specifed ''ADK_BUILD_TYPE'' environment variable is checked. If it is not set the ''release'' value is used. The following values accepted:
    * ''debug''
    * ''release''
  * ''%%--adk-platform%%'' -- target platform. The following values accepted:
    * ''native''
    * ''linux''
    * ''avr''
  * ''%%--adk_prefix%%'' -- ADK installation prefix. Taken from ''ADK_PREFIX'' environment variable if not specified. "/usr" by default.
  * ''%%--adk-run-tests%%'' -- build only unit tests and their dependencies. Run all unit tests.
  * ''%%--adk-write-fuses%%'' -- Write fuses to the connected MCU.
  * ''%%--adk-verify-fuses%%'' -- Verify fuses in the connected MCU.
  * ''%%--adk-upload-flash%%'', ''%%--adk-write-flash%%'' -- Upload firmware flash image to the connected MCU.
  * ''%%--adk-verify-flash%%'' -- Verify firmware flash image in the connected MCU.
  * ''%%--adk-upload-eeprom%%'', ''%%--adk-write--epprom%%'' -- Upload EEPROM image to the connected MCU.
  * ''%%--adk-verify-eeprom%%'' -- Verify EEPROM image in the connected MCU.
  * ''%%--adk-mcu-reset%%'' -- Reset the connected MCU.

Build configuration parameters:
  * ''APP_TYPE'' -- target application type. The following values accepted:
    * ''app'' for building executable application (default).
    * ''dynamic_lib'' for building dynamic library (it is either shared object for Linux or DLL for Windows).
    * ''static_lib'' for building static library.
    * ''unit_test'' for building unit test.
  * ''APP_NAME'' -- name of resulted binary file without suffix and/or prefix. Must be specified to to enable the target.
  * ''APP_ALIAS'' -- alias name for SCons target name. Should be unique in a project scope. Defaults to ''APP_NAME''.
  * ''PLATFORM''
  * ''SUBDIRS'' -- string or list with subdirectory names which should be built. The subdirectories should have //SConscript// file inside. Considered as dependencies af the given build configuration.
  *  ''SRC_DIRS'' -- additional directories to search for source files. By default only current directory is inspected.
  * ''SRCS'' -- additional particular source files to include in the build.
  * ''INCLUDE_DIRS'' -- additional directories to specify as include paths.
  * ''CFLAGS'' -- additional compilation flags for C files.
  * ''CXXFLAGS'' -- additional compilation flags for C++ files.
  * ''CCFLAGS'' -- additional compilation flags for both C and C++ files.
  * ''ASFLAGS'' -- additional compilation flags for assembler.
  * ''DEFS'' -- additional preprocessor macros to be defined. In form of string "single_name name=value".
  * ''PKGS'' -- required packages which are configured through ''pkg-config''. The value is space-separated string of package names. Name can be followed by version ID in the following form:
    * name=version -- exact version required.
    * name>version -- at least the specified version required.
    * name<version -- at most the specified version required.
  * ''RES_FILES'' -- additional raw resource files to embed into the executable binary.
  * ''PCHS'' -- headers for which pre-compiled headers should be generated.
  * ''INSTALL_DIR'' -- directories to install compiled binary into.
  * ''NO_ADK_LIB'' -- do not link with ADK library. ''False'' by default.
  * ''LIBS'' -- libraries to link with.
  * ''LIB_DIRS'' -- additional directories to search for libraries.
  * ''DEBUG_OPT_FLAGS'' -- optimization flags for debug build. They overwrite default flags if specified.
  * ''RELEASE_OPT_FLAGS'' -- optimization flags for release build. They overwrite default flags if specified.
  * ''LINKFLAGS'' -- additional flags for linker.
  * ''TEST_DESC'' -- Short description for a unit test.

Optional flag variables -- they can have values ''True'' or ''False'' to enable or disable corresponding feature:
  * ''USE_GUI'' -- use GUI components (based on Gtk+ library). ''True'' by default for desktop targets, ''False'' for the rest ones.
  * ''USE_PYTHON'' -- embedded Python support. ''False'' by default.
  * ''AVR_USE_USB'' -- use USB interface software implementation. ''False'' by default.
  * ''AVR_USE_COMMON_LIB'' -- use common library code for AVR. ''True'' by default.

Platform specific variables:
  - For ''avr'' platform:
    * ''MCU'' -- target MCU device model. Should be one of the values allowed by '-mmcu' parameter of GCC for AVR target.
    * ''PROGRAMMER'' -- used programmer type. Should be one of the values accepted for '-c' option of 'avrdude' (e.g. 'avrisp2').
    * ''PROGRAMMER_BUS'' -- used programmer connection. The value is provided to '-P' option of 'avrdude' (e.g. '/dev/ttyUSB0').
    * ''MCU_FUSE'' -- fuse byte in hexadecimal representation (e.g. 0xff) for devices with one fuse byte.
    * ''MCU_LFUSE'' -- fuse low byte in hexadecimal representation (e.g. 0xff).
    * ''MCU_HFUSE'' -- fuse high byte in hexadecimal representation (e.g. 0xff).
    * ''MCU_EFUSE'' -- fuse extended byte in hexadecimal representation (e.g. 0xff).
    * ''MCU_FREQ'' -- MCU clock frequency in Hz.

Currently the following source file types are supported:
  * C source files -- pattern '*.c'.
  * C++ source files -- pattern '*.cpp'.
  * Assembler source files -- pattern '*.S' (firstly filtered through C preprocessor) or '*.s' (no preprocessing).

FIXME installation packages.


===== Unit tests =====

For unit test target the ''APP_TYPE'' parameter should have ''unit_test'' value. These additional variables should also be defined:
  * ''TEST_DESC'' -- free-form description of the test. The value may have spaces.
  * ''TEST_SRCS'' -- list of source files of component being tested.

<code python>
import adk

conf = adk.Conf(APP_TYPE = 'unit_test',
                APP_NAME = 'sample_test',
                TEST_DESC = 'Sample ADK unit test',
                TEST_SRCS = Glob('component/*.cpp')).Build()
</code>


===== Documentation =====

Documentation standard for ADK is [[http://www.dokuwiki.org/dokuwiki|Dokuwiki]] documentation format. It is well suitable for storing it in source code repository.

Setup DokuWiki and make links from ''data'' and ''media'' directories (or subdirectories there if using desired namaespace for a project) to directories with documentation in your project. Then run PHP as server:
<code bash>
php -S 127.0.0.1:20080 -t /opt/dokuwiki
</code>

FIXME doxygen


===== Project management =====

Initialize Trac environment:
<code bash>
trac-admin /path/to/project initenv
</code>

Authentication setup:
(''htpasswd'' is part of ''apache2-utils'' package)
<code bash>
htpasswd -c conf/trac.htpasswd admin
trac-admin /path/to/project permission add admin TRAC_ADMIN
</code>

Run:
<code bash>
tracd -p 20088 --basic-auth="*,var/trac/conf/trac.htpasswd,Trac" var/trac
</code>

===== Required packages =====

  * ''libgtkmm-3.0-dev''
  * ''gcc-avr'' (for AVR target support)
  * ''avr-libc'' (for AVR target support)
  * ''libusb-1.0-0-dev'' (for AVR USB devices support on desktop platforms)
  * ''valgrind'' (for running unit tests)
  * ''avrdude'' (for AVR target firmware uploading)