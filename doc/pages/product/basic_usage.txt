====== Basic usage ======

In order to built an application which uses ADK the following conditions must be met:
  * ADK package is available in the file system.
  * ''ADK_ROOT'' environment variable is pointing to ADK package root directory.
  * ''ADK_TOOLS'' environment variable is pointing to a directory where ADK tools binaries resides.

Create makefile using the following rules:
  * Define '''ADK_PLATFORM''' variable as a target platform type. Default value is '''linux64'''. The following values allowed:
    * '''avr''' for AVR micro-controller device.
    * '''linux32''' for 32-bits Linux OS.
    * '''linux64''' for 64-bites Linux OS.
    * '''win32''' for 32-bits Windows OS.
    * '''win64''' for 64-bites Windows OS.
  * Define '''ADK_BUILD_TYPE''' variable as target build type. Default value is '''release'''. The following values allowed:
    * '''debug''' for debug build with additional code for debugging and troubleshooting, turned off optimization and maximal debug information in the resulted binaries.
    * '''release''' for release build with minimized size and maximized performance of the resulted binaries.
  * Define '''ADK_APP_TYPE''' variable as target application type. Default value is '''app'''. The following values allowed:
    * '''app''' for building executable application.
    * '''lib''' for building dynamic library (it is either shared object for Linux or DLL for Windows).
  * Define '''ADK_APP_NAME''' variable as a name of resulted binary file without suffix and/or prefix.
  * Include "$(ADK_ROOT)/make/make.mk" file.

Platform specific variables:
  - For '''avr''' platform:
    * '''ADK_MCU''' -- target MCU device model. Should be one of the values allowed by '-mmcu' parameter of GCC for AVR target.

Optional variables in the makefile:
  * '''SUBDIRS''' -- list of subdirectories to execute make. It may be specified without specifying application parameters. In such case nothing will be built in this directory but the specified subdirectories will be traversed.
  * '''SRC_DIRS''' -- additional directories to search for source files. By default only current directory is inspected.
  * '''SRCS''' -- additional particular source files to include in the build.
  * '''INCLUDE_DIRS''' -- additional directories to specify as include paths.

After that run '''make''' specifying just created makefile. Current directory (and optionally directories specified by '''SRC_DIRS''' variable) will be searched for source files (matching name patterns for supported source file types) and all found files are compiled. The result will be available in '''build''' directory and subdirectory named by target platform and build type.

Currently the following source file types are supported:
  * C source files -- pattern '*.c'.
  * C++ source files -- pattern '*.cpp'.
  * Assembler source files -- paterm '*.S'. They are firstly filtered through C preprocessor.

The following make targets available:
  * '''all''' -- build specified application. Default target.
  * '''clean''' -- remove all files created during the build. If '''build''' directory has several subdirectories then only one corresponding to specified platform and build type is removed. If it is the only subdirectory then '''build''' directory is also removed.
  * '''adk_build_dir''' -- create output directories. Can be used as dependency for custom user targets which produce some output.

The following variables are available in the ADK makefile scope. They can be used when user is writing some extensions for make process in an application makefile.
  * '''ADK_OBJ_DIR''' -- output directory where all produced files should be stored.

FIXME Doxygen parameters.

FIXME installation packages.

FIXME unit tests parameters/targets.
