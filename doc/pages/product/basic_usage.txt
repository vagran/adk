====== Basic usage ======

In order to built an application which uses ADK the following conditions must be met:
  * ADK package is available in the file system.
  * ''ADK_ROOT'' environment variable is pointing to ADK package root directory.
  * ''ADK_PREFIX'' environment variable is pointing to a directory where ADK tools are installed.

Create makefile using the following rules:
  * Define ''ADK_PLATFORM'' variable as a target platform type. Default value is ''linux64''. The following values allowed:
    * ''avr'' for AVR micro-controller device.
    * ''linux32'' for 32-bits Linux OS.
    * ''linux64'' for 64-bites Linux OS.
    * ''win32'' for 32-bits Windows OS.
    * ''win64'' for 64-bites Windows OS.
  * Define ''ADK_BUILD_TYPE'' variable as target build type. Default value is ''release''. The following values allowed:
    * ''debug'' for debug build with additional code for debugging and troubleshooting, turned off optimization and maximal debug information in the resulted binaries.
    * ''release'' for release build with minimized size and maximized performance of the resulted binaries.
  * Define ''ADK_APP_TYPE'' variable as target application type. Default value is ''app''. The following values allowed:
    * ''app'' for building executable application.
    * ''lib'' for building dynamic library (it is either shared object for Linux or DLL for Windows).
    * ''unit_test'' for building unit test.
    * ''doc'' for documentation directory.
  * Define ''ADK_APP_NAME'' variable as a name of resulted binary file without suffix and/or prefix.
  * Include "$(ADK_ROOT)/make/make.mk" file.

Platform specific variables:
  - For ''avr'' platform:
    * ''ADK_MCU'' -- target MCU device model. Should be one of the values allowed by '-mmcu' parameter of GCC for AVR target.
    * ''ADK_PROGRAMMER'' -- used programmer type. Should be one of the values accepted for '-c' option of 'avrdude' (e.g. 'avrisp2').
    * ''ADK_PROGRAMMER_BUS'' -- used programmer connection. The value is provided to '-P' option of 'avrdude' (e.g. '/dev/ttyUSB0').
    * ''ADK_MCU_FUSE'' -- fuse byte in hexadecimal representation (e.g. 0xff) for devices with one fuse byte.
    * ''ADK_MCU_LFUSE'' -- fuse low byte in hexadecimal representation (e.g. 0xff).
    * ''ADK_MCU_HFUSE'' -- fuse high byte in hexadecimal representation (e.g. 0xff).
    * ''ADK_MCU_EFUSE'' -- fuse extended byte in hexadecimal representation (e.g. 0xff).
    * ''ADK_MCU_FREQ'' -- MCU clock frequency in Hz.

Optional variables in the makefile:
  * ''SUBDIRS'' -- list of subdirectories to execute make. It may be specified without specifying application parameters. In such case nothing will be built in this directory but the specified subdirectories will be traversed.
  * ''SRC_DIRS'' -- additional directories to search for source files. By default only current directory is inspected.
  * ''SRCS'' -- additional particular source files to include in the build.
  * ''INCLUDE_DIRS'' -- additional directories to specify as include paths.
  * ''CFLAGS'' -- additional compilation flags for C files.
  * ''CPPFLAGS'' -- additional compilation flags for C++ files.
  * ''LDFLAGS'' -- additional compilation flags for linker.
  * ''DEFS'' -- additional defines for '-D' compiler option.
  * ''DEBUG_OPT_FLAGS'' -- optimization flags for debug build. They overwrite default flags if specified.
  * ''RELEASE_OPT_FLAGS'' -- optimization flags for release build. They overwrite default flags if specified.
  * ''LIB_DIRS'' -- additional directories to search for libraries.
  * ''PCHS'' -- full paths to headers for which pre-compiled headers should be generated.
  * ''ADK_INSTALL_DIR'' -- directory to install compiled binary to.
  * ''ADK_INSTALL_MODE'' -- octal number for file mode for installed binary.
  * ''GLADE_FILES'' -- additional "*.glade" XML files to embed into the executable binary. By default all "*.glade" files in all source directories are added.
  * ''RES_FILES'' -- additional raw resource files to embed into the executable binary.

Optional flag variables -- they can have values "yes" or "no" to enable or disable corresponding feature:
  * ''ADK_USE_GUI'' -- use GUI components (based on Gtk+ library). "yes" by default for desktop targets.
  * ''ADK_USE_PYTHON'' -- embedded Python support. "no" by default.
  * ''ADK_AVR_USE_USB'' -- use USB interface software implementation. "no" by default.

//:!: Everywhere a list of values is acceptable in makefile variables, it can be specified as blank separated values.//

After that run ''make'' specifying just created makefile. Current directory (and optionally directories specified by ''SRC_DIRS'' variable) will be searched for source files (matching name patterns for supported source file types) and all found files are compiled. The result will be available in ''build'' directory and subdirectory named by target platform and build type.

Currently the following source file types are supported:
  * C source files -- pattern '*.c'.
  * C++ source files -- pattern '*.cpp'.
  * Assembler source files -- paterm '*.S'. They are firstly filtered through C preprocessor.

The following make targets available:
  * ''all'' -- build specified application. Default target.
  * ''clean'' -- remove all files created during the build. If ''build'' directory has several subdirectories then only one corresponding to specified platform and build type is removed. If it is the only subdirectory then ''build'' directory is also removed.
  * ''clean_all'' -- remove all files created during the build for all targets.
  * ''install'' -- install build output files to ''$(ADK_PREFIX)''.
  * ''$(ADK_BUILD_DIR)'' -- create output directories. Can be used as dependency for custom user targets which produce some output. Should not be used as dependency for generated files themselves because they will be rebuilt even if nothing is changed (because directory modification timestamp is updated each time some file is added or removed into the directory).
  * ''upload'' -- upload firmware (flash and EEPROM) to AVR MCU.
  * ''fuse'' -- program fuse bytes on AVR MCU.
  * ''verify'' -- verify firmware (flash and EEPROM) in AVR MCU.

The following variables are available in the ADK makefile scope. They can be used when user is writing some extensions for make process in an application makefile.
  * ''ADK_OBJ_DIR'' -- output directory where all produced files should be stored.

FIXME installation packages.

====== Unit tests ======

For unit test target the ''ADK_APP_TYPE'' variable should have ''unit_test'' value. These additional variables should also be defined:
  * ''ADK_TEST_NAME'' -- short symbolic name of the test. The value should not have spaces.
  * ''ADK_TEST_DESC'' -- free-form description of the test. The value may have spaces.
  * ''ADK_TEST_SRCS'' -- list of source files of component being tested.

====== Documentation ======

Documentation standard for ADK is [[http://www.dokuwiki.org/dokuwiki|Dokuwiki]] documentation format. It is well suitable for storing it in source code repository. Specify 
''ADK_APP_TYPE'' as ''doc'' in the makefile. Additional variables are:
  * ''ADK_DOC_DIR'' -- directory where the Dokuwiki server runs.
  * ''ADK_DOC_NAMESPACE'' -- namespace prefix if the documentation server is shared between several projects.
  * ''ADK_DOC_DEPLOY_DIR'' -- additional paths for documentation deployment.

The following make targets are supported:
  * ''all'' -- copies documentation files from the server directory to the source files directory.
  * ''update'' -- update documentation files from deployment directory.
  * ''deploy'' -- copies documentation files from source files directory to the server directory and all specified additional deployment directories if any.

FIXME doxygen

====== SCons usage ======

Command line parameters:
  * ''--adk-build-type'' -- build configuration type. The following values accepted:
    * ''debug''
    * ''release''
  * ''--adk-platform'' -- target platform. The following values accepted:
    * ''native''
    * ''linux''
    * ''avr''

<code python>
import adk

adk.Conf(APP_TYPE = 'lib',
         APP_NAME = 'adk').Build()
</code>

Build configuration parameters:
  * ''APP_TYPE'' -- target application type. The following values accepted:
    * ''app'' for building executable application (default).
    * ''dynamic_lib'' for building dynamic library (it is either shared object for Linux or DLL for Windows).
    * ''static_lib'' for building static library.
    * ''unit_test'' for building unit test.
  * ''APP_NAME'' -- name of resulted binary file without suffix and/or prefix. Must be specified to to enable the target.
  * ''APP_ALIAS'' -- alias name for SCons target name. Should be unique in a project scope. Defaults to ''APP_NAME''.
  * ''PLATFORM''
  * ''SUBDIRS'' -- string or list with subdirectory names which should be built. The subdirectories should have //SConscript// file inside. Considered as dependencies af the given build configuration.
  * '' INCLUDE_DIRS'' -- additional directories to specify as include paths.
  * ''CFLAGS'' -- additional compilation flags for C files.
  * ''CXXFLAGS'' -- additional compilation flags for C++ files.
  * ''CCFLAGS'' -- additional compilation flags for both C and C++ files.
  * ''DEFS'' -- additional preprocessor macros to be defined. In form of string "single_name name=value".
  * ''PKGS'' -- required packages which are configured through ''pkg-config''. The value is space-separated string of package names. Name can be followed by version ID in the following form:
    * name=version -- exact version required.
    * name>version -- at least the specified version required.
    * name<version -- at most the specified version required.
  * ''RES_FILES'' -- additional raw resource files to embed into the executable binary.
  * ''PCHS'' -- headers for which pre-compiled headers should be generated.
  * ''INSTALL_DIR'' -- directories to install compiled binary into.

Optional flag variables -- they can have values ''True'' or ''False'' to enable or disable corresponding feature:
  * ''USE_GUI'' -- use GUI components (based on Gtk+ library). ''True'' by default for desktop targets, ''False'' for the rest ones.
  * ''USE_PYTHON'' -- embedded Python support. ''False'' by default.
  * ''AVR_USE_USB'' -- use USB interface software implementation. ''False'' by default.

===== Required development packages =====

  * libgtkmm-3.0-dev
